//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace Template10.Samples.TilesSample
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
    private global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlTypeInfoProvider _provider;

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace Sample.Tiles__and_Toast__XamlTypeInfo
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[50];
            _typeNameTable[0] = "Template10.Common.BootStrapper";
            _typeNameTable[1] = "Windows.UI.Xaml.Application";
            _typeNameTable[2] = "Template10.Common.StateItems";
            _typeNameTable[3] = "System.Collections.Generic.Dictionary`2<String, Object>";
            _typeNameTable[4] = "Object";
            _typeNameTable[5] = "String";
            _typeNameTable[6] = "Template10.Services.NavigationService.INavigationService";
            _typeNameTable[7] = "System.Func`2<Windows.ApplicationModel.Activation.SplashScreen, Windows.UI.Xaml.Controls.UserControl>";
            _typeNameTable[8] = "System.MulticastDelegate";
            _typeNameTable[9] = "System.Delegate";
            _typeNameTable[10] = "TimeSpan";
            _typeNameTable[11] = "System.ValueType";
            _typeNameTable[12] = "Boolean";
            _typeNameTable[13] = "Windows.ApplicationModel.Activation.IActivatedEventArgs";
            _typeNameTable[14] = "Template10.Common.BootStrapper.States";
            _typeNameTable[15] = "System.Enum";
            _typeNameTable[16] = "Template10.Controls.ModalDialog";
            _typeNameTable[17] = "Windows.UI.Xaml.Controls.ContentControl";
            _typeNameTable[18] = "Windows.UI.Xaml.UIElement";
            _typeNameTable[19] = "Template10.Samples.TilesSample.ViewModels.DetailPageViewModel";
            _typeNameTable[20] = "Template10.Mvvm.ViewModelBase";
            _typeNameTable[21] = "Template10.Mvvm.BindableBase";
            _typeNameTable[22] = "Windows.UI.Xaml.Visibility";
            _typeNameTable[23] = "Template10.Common.IDispatcherWrapper";
            _typeNameTable[24] = "Template10.Common.IStateItems";
            _typeNameTable[25] = "Template10.Controls.PageHeader";
            _typeNameTable[26] = "Windows.UI.Xaml.Controls.CommandBar";
            _typeNameTable[27] = "Windows.UI.Xaml.Controls.Frame";
            _typeNameTable[28] = "Template10.Behaviors.EllipsisBehavior.Visibilities";
            _typeNameTable[29] = "Windows.UI.Xaml.Controls.Symbol";
            _typeNameTable[30] = "Double";
            _typeNameTable[31] = "Template10.Samples.TilesSample.Views.DetailPage";
            _typeNameTable[32] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[33] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[34] = "Template10.Samples.TilesSample.ViewModels.MainPageViewModel";
            _typeNameTable[35] = "Template10.Mvvm.DelegateCommand";
            _typeNameTable[36] = "Microsoft.Xaml.Interactivity.Interaction";
            _typeNameTable[37] = "Microsoft.Xaml.Interactivity.BehaviorCollection";
            _typeNameTable[38] = "Windows.UI.Xaml.DependencyObjectCollection";
            _typeNameTable[39] = "Windows.UI.Xaml.DependencyObject";
            _typeNameTable[40] = "Template10.Behaviors.KeyBehavior";
            _typeNameTable[41] = "Microsoft.Xaml.Interactivity.ActionCollection";
            _typeNameTable[42] = "Windows.System.VirtualKey";
            _typeNameTable[43] = "Template10.Behaviors.KeyBehavior.Kinds";
            _typeNameTable[44] = "Microsoft.Xaml.Interactions.Core.InvokeCommandAction";
            _typeNameTable[45] = "System.Windows.Input.ICommand";
            _typeNameTable[46] = "Windows.UI.Xaml.Data.IValueConverter";
            _typeNameTable[47] = "Template10.Behaviors.NavButtonBehavior";
            _typeNameTable[48] = "Template10.Behaviors.NavButtonBehavior.Directions";
            _typeNameTable[49] = "Template10.Samples.TilesSample.Views.MainPage";

            _typeTable = new global::System.Type[50];
            _typeTable[0] = typeof(global::Template10.Common.BootStrapper);
            _typeTable[1] = typeof(global::Windows.UI.Xaml.Application);
            _typeTable[2] = typeof(global::Template10.Common.StateItems);
            _typeTable[3] = typeof(global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>);
            _typeTable[4] = typeof(global::System.Object);
            _typeTable[5] = typeof(global::System.String);
            _typeTable[6] = typeof(global::Template10.Services.NavigationService.INavigationService);
            _typeTable[7] = typeof(global::System.Func<global::Windows.ApplicationModel.Activation.SplashScreen, global::Windows.UI.Xaml.Controls.UserControl>);
            _typeTable[8] = typeof(global::System.MulticastDelegate);
            _typeTable[9] = typeof(global::System.Delegate);
            _typeTable[10] = typeof(global::System.TimeSpan);
            _typeTable[11] = typeof(global::System.ValueType);
            _typeTable[12] = typeof(global::System.Boolean);
            _typeTable[13] = typeof(global::Windows.ApplicationModel.Activation.IActivatedEventArgs);
            _typeTable[14] = typeof(global::Template10.Common.BootStrapper.States);
            _typeTable[15] = typeof(global::System.Enum);
            _typeTable[16] = typeof(global::Template10.Controls.ModalDialog);
            _typeTable[17] = typeof(global::Windows.UI.Xaml.Controls.ContentControl);
            _typeTable[18] = typeof(global::Windows.UI.Xaml.UIElement);
            _typeTable[19] = typeof(global::Template10.Samples.TilesSample.ViewModels.DetailPageViewModel);
            _typeTable[20] = typeof(global::Template10.Mvvm.ViewModelBase);
            _typeTable[21] = typeof(global::Template10.Mvvm.BindableBase);
            _typeTable[22] = typeof(global::Windows.UI.Xaml.Visibility);
            _typeTable[23] = typeof(global::Template10.Common.IDispatcherWrapper);
            _typeTable[24] = typeof(global::Template10.Common.IStateItems);
            _typeTable[25] = typeof(global::Template10.Controls.PageHeader);
            _typeTable[26] = typeof(global::Windows.UI.Xaml.Controls.CommandBar);
            _typeTable[27] = typeof(global::Windows.UI.Xaml.Controls.Frame);
            _typeTable[28] = typeof(global::Template10.Behaviors.EllipsisBehavior.Visibilities);
            _typeTable[29] = typeof(global::Windows.UI.Xaml.Controls.Symbol);
            _typeTable[30] = typeof(global::System.Double);
            _typeTable[31] = typeof(global::Template10.Samples.TilesSample.Views.DetailPage);
            _typeTable[32] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[33] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[34] = typeof(global::Template10.Samples.TilesSample.ViewModels.MainPageViewModel);
            _typeTable[35] = typeof(global::Template10.Mvvm.DelegateCommand);
            _typeTable[36] = typeof(global::Microsoft.Xaml.Interactivity.Interaction);
            _typeTable[37] = typeof(global::Microsoft.Xaml.Interactivity.BehaviorCollection);
            _typeTable[38] = typeof(global::Windows.UI.Xaml.DependencyObjectCollection);
            _typeTable[39] = typeof(global::Windows.UI.Xaml.DependencyObject);
            _typeTable[40] = typeof(global::Template10.Behaviors.KeyBehavior);
            _typeTable[41] = typeof(global::Microsoft.Xaml.Interactivity.ActionCollection);
            _typeTable[42] = typeof(global::Windows.System.VirtualKey);
            _typeTable[43] = typeof(global::Template10.Behaviors.KeyBehavior.Kinds);
            _typeTable[44] = typeof(global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction);
            _typeTable[45] = typeof(global::System.Windows.Input.ICommand);
            _typeTable[46] = typeof(global::Windows.UI.Xaml.Data.IValueConverter);
            _typeTable[47] = typeof(global::Template10.Behaviors.NavButtonBehavior);
            _typeTable[48] = typeof(global::Template10.Behaviors.NavButtonBehavior.Directions);
            _typeTable[49] = typeof(global::Template10.Samples.TilesSample.Views.MainPage);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_2_StateItems() { return new global::Template10.Common.StateItems(); }
        private object Activate_3_Dictionary() { return new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>(); }
        private object Activate_16_ModalDialog() { return new global::Template10.Controls.ModalDialog(); }
        private object Activate_19_DetailPageViewModel() { return new global::Template10.Samples.TilesSample.ViewModels.DetailPageViewModel(); }
        private object Activate_25_PageHeader() { return new global::Template10.Controls.PageHeader(); }
        private object Activate_31_DetailPage() { return new global::Template10.Samples.TilesSample.Views.DetailPage(); }
        private object Activate_34_MainPageViewModel() { return new global::Template10.Samples.TilesSample.ViewModels.MainPageViewModel(); }
        private object Activate_37_BehaviorCollection() { return new global::Microsoft.Xaml.Interactivity.BehaviorCollection(); }
        private object Activate_40_KeyBehavior() { return new global::Template10.Behaviors.KeyBehavior(); }
        private object Activate_41_ActionCollection() { return new global::Microsoft.Xaml.Interactivity.ActionCollection(); }
        private object Activate_44_InvokeCommandAction() { return new global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction(); }
        private object Activate_47_NavButtonBehavior() { return new global::Template10.Behaviors.NavButtonBehavior(); }
        private object Activate_49_MainPage() { return new global::Template10.Samples.TilesSample.Views.MainPage(); }
        private void MapAdd_2_StateItems(object instance, object key, object item)
        {
            var collection = (global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>)instance;
            var newKey = (global::System.String)key;
            var newItem = (global::System.Object)item;
            collection.Add(newKey, newItem);
        }
        private void MapAdd_3_Dictionary(object instance, object key, object item)
        {
            var collection = (global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>)instance;
            var newKey = (global::System.String)key;
            var newItem = (global::System.Object)item;
            collection.Add(newKey, newItem);
        }
        private void VectorAdd_37_BehaviorCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.DependencyObject>)instance;
            var newItem = (global::Windows.UI.Xaml.DependencyObject)item;
            collection.Add(newItem);
        }
        private void VectorAdd_41_ActionCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.DependencyObject>)instance;
            var newItem = (global::Windows.UI.Xaml.DependencyObject)item;
            collection.Add(newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  Template10.Common.BootStrapper
                userType = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Application"));
                userType.AddMemberName("SessionState");
                userType.AddMemberName("NavigationService");
                userType.AddMemberName("SplashFactory");
                userType.AddMemberName("CacheMaxDuration");
                userType.AddMemberName("ShowShellBackButton");
                userType.AddMemberName("ForceShowShellBackButton");
                userType.AddMemberName("OriginalActivatedArgs");
                userType.AddMemberName("CurrentState");
                userType.AddMemberName("EnableAutoRestoreAfterTerminated");
                userType.AddMemberName("AutoRestoreAfterTerminated");
                userType.AddMemberName("AutoExtendExecutionSession");
                userType.AddMemberName("AutoSuspendAllFrames");
                userType.AddMemberName("ModalDialog");
                userType.AddMemberName("ModalContent");
                xamlType = userType;
                break;

            case 1:   //  Windows.UI.Xaml.Application
                xamlType = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Template10.Common.StateItems
                userType = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.Generic.Dictionary`2<String, Object>"));
                userType.DictionaryAdd = MapAdd_2_StateItems;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 3:   //  System.Collections.Generic.Dictionary`2<String, Object>
                userType = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_3_Dictionary;
                userType.DictionaryAdd = MapAdd_3_Dictionary;
                xamlType = userType;
                break;

            case 4:   //  Object
                xamlType = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 5:   //  String
                xamlType = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 6:   //  Template10.Services.NavigationService.INavigationService
                userType = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 7:   //  System.Func`2<Windows.ApplicationModel.Activation.SplashScreen, Windows.UI.Xaml.Controls.UserControl>
                userType = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.MulticastDelegate"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 8:   //  System.MulticastDelegate
                userType = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Delegate"));
                xamlType = userType;
                break;

            case 9:   //  System.Delegate
                userType = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 10:   //  TimeSpan
                userType = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 11:   //  System.ValueType
                userType = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 12:   //  Boolean
                xamlType = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 13:   //  Windows.ApplicationModel.Activation.IActivatedEventArgs
                userType = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 14:   //  Template10.Common.BootStrapper.States
                userType = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Template10.Common.BootStrapper.States.None);
                userType.AddEnumValue("Running", global::Template10.Common.BootStrapper.States.Running);
                userType.AddEnumValue("BeforeInit", global::Template10.Common.BootStrapper.States.BeforeInit);
                userType.AddEnumValue("AfterInit", global::Template10.Common.BootStrapper.States.AfterInit);
                userType.AddEnumValue("BeforeLaunch", global::Template10.Common.BootStrapper.States.BeforeLaunch);
                userType.AddEnumValue("AfterLaunch", global::Template10.Common.BootStrapper.States.AfterLaunch);
                userType.AddEnumValue("BeforeActivate", global::Template10.Common.BootStrapper.States.BeforeActivate);
                userType.AddEnumValue("AfterActivate", global::Template10.Common.BootStrapper.States.AfterActivate);
                userType.AddEnumValue("BeforeStart", global::Template10.Common.BootStrapper.States.BeforeStart);
                userType.AddEnumValue("AfterStart", global::Template10.Common.BootStrapper.States.AfterStart);
                xamlType = userType;
                break;

            case 15:   //  System.Enum
                userType = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 16:   //  Template10.Controls.ModalDialog
                userType = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ContentControl"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 17:   //  Windows.UI.Xaml.Controls.ContentControl
                xamlType = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 18:   //  Windows.UI.Xaml.UIElement
                xamlType = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 19:   //  Template10.Samples.TilesSample.ViewModels.DetailPageViewModel
                userType = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Template10.Mvvm.ViewModelBase"));
                userType.Activator = Activate_19_DetailPageViewModel;
                userType.AddMemberName("Value");
                userType.AddMemberName("PinVisibility");
                userType.AddMemberName("UnPinVisibility");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 20:   //  Template10.Mvvm.ViewModelBase
                userType = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Template10.Mvvm.BindableBase"));
                userType.AddMemberName("NavigationService");
                userType.AddMemberName("Dispatcher");
                userType.AddMemberName("SessionState");
                xamlType = userType;
                break;

            case 21:   //  Template10.Mvvm.BindableBase
                userType = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 22:   //  Windows.UI.Xaml.Visibility
                xamlType = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 23:   //  Template10.Common.IDispatcherWrapper
                userType = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 24:   //  Template10.Common.IStateItems
                userType = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 25:   //  Template10.Controls.PageHeader
                userType = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.CommandBar"));
                userType.Activator = Activate_25_PageHeader;
                userType.AddMemberName("Frame");
                userType.AddMemberName("EllipsisVisibility");
                userType.AddMemberName("PrimaryCommandsVisibility");
                userType.AddMemberName("BackButtonVisibility");
                userType.AddMemberName("BackButtonContent");
                userType.AddMemberName("EnableHamburgerMenuAutoLayout");
                userType.AddMemberName("VisualStateNarrowMinWidth");
                userType.AddMemberName("VisualStateNormalMinWidth");
                userType.AddMemberName("Text");
                xamlType = userType;
                break;

            case 26:   //  Windows.UI.Xaml.Controls.CommandBar
                xamlType = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 27:   //  Windows.UI.Xaml.Controls.Frame
                xamlType = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 28:   //  Template10.Behaviors.EllipsisBehavior.Visibilities
                userType = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Visible", global::Template10.Behaviors.EllipsisBehavior.Visibilities.Visible);
                userType.AddEnumValue("Collapsed", global::Template10.Behaviors.EllipsisBehavior.Visibilities.Collapsed);
                userType.AddEnumValue("Auto", global::Template10.Behaviors.EllipsisBehavior.Visibilities.Auto);
                xamlType = userType;
                break;

            case 29:   //  Windows.UI.Xaml.Controls.Symbol
                xamlType = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 30:   //  Double
                xamlType = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 31:   //  Template10.Samples.TilesSample.Views.DetailPage
                userType = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_31_DetailPage;
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 32:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 33:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 34:   //  Template10.Samples.TilesSample.ViewModels.MainPageViewModel
                userType = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Template10.Mvvm.ViewModelBase"));
                userType.Activator = Activate_34_MainPageViewModel;
                userType.AddMemberName("Value");
                userType.AddMemberName("GotoDetailsPageCommand");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 35:   //  Template10.Mvvm.DelegateCommand
                userType = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 36:   //  Microsoft.Xaml.Interactivity.Interaction
                userType = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("Behaviors");
                xamlType = userType;
                break;

            case 37:   //  Microsoft.Xaml.Interactivity.BehaviorCollection
                userType = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObjectCollection"));
                userType.CollectionAdd = VectorAdd_37_BehaviorCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 38:   //  Windows.UI.Xaml.DependencyObjectCollection
                xamlType = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 39:   //  Windows.UI.Xaml.DependencyObject
                xamlType = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 40:   //  Template10.Behaviors.KeyBehavior
                userType = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_40_KeyBehavior;
                userType.SetContentPropertyName("Template10.Behaviors.KeyBehavior.Actions");
                userType.AddMemberName("Actions");
                userType.AddMemberName("Key");
                userType.AddMemberName("AssociatedObject");
                userType.AddMemberName("AndControl");
                userType.AddMemberName("AndAlt");
                userType.AddMemberName("AndShift");
                userType.AddMemberName("Event");
                xamlType = userType;
                break;

            case 41:   //  Microsoft.Xaml.Interactivity.ActionCollection
                userType = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObjectCollection"));
                userType.CollectionAdd = VectorAdd_41_ActionCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 42:   //  Windows.System.VirtualKey
                userType = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Windows.System.VirtualKey.None);
                userType.AddEnumValue("LeftButton", global::Windows.System.VirtualKey.LeftButton);
                userType.AddEnumValue("RightButton", global::Windows.System.VirtualKey.RightButton);
                userType.AddEnumValue("Cancel", global::Windows.System.VirtualKey.Cancel);
                userType.AddEnumValue("MiddleButton", global::Windows.System.VirtualKey.MiddleButton);
                userType.AddEnumValue("XButton1", global::Windows.System.VirtualKey.XButton1);
                userType.AddEnumValue("XButton2", global::Windows.System.VirtualKey.XButton2);
                userType.AddEnumValue("Back", global::Windows.System.VirtualKey.Back);
                userType.AddEnumValue("Tab", global::Windows.System.VirtualKey.Tab);
                userType.AddEnumValue("Clear", global::Windows.System.VirtualKey.Clear);
                userType.AddEnumValue("Enter", global::Windows.System.VirtualKey.Enter);
                userType.AddEnumValue("Shift", global::Windows.System.VirtualKey.Shift);
                userType.AddEnumValue("Control", global::Windows.System.VirtualKey.Control);
                userType.AddEnumValue("Menu", global::Windows.System.VirtualKey.Menu);
                userType.AddEnumValue("Pause", global::Windows.System.VirtualKey.Pause);
                userType.AddEnumValue("CapitalLock", global::Windows.System.VirtualKey.CapitalLock);
                userType.AddEnumValue("Kana", global::Windows.System.VirtualKey.Kana);
                userType.AddEnumValue("Hangul", global::Windows.System.VirtualKey.Hangul);
                userType.AddEnumValue("Junja", global::Windows.System.VirtualKey.Junja);
                userType.AddEnumValue("Final", global::Windows.System.VirtualKey.Final);
                userType.AddEnumValue("Hanja", global::Windows.System.VirtualKey.Hanja);
                userType.AddEnumValue("Kanji", global::Windows.System.VirtualKey.Kanji);
                userType.AddEnumValue("Escape", global::Windows.System.VirtualKey.Escape);
                userType.AddEnumValue("Convert", global::Windows.System.VirtualKey.Convert);
                userType.AddEnumValue("NonConvert", global::Windows.System.VirtualKey.NonConvert);
                userType.AddEnumValue("Accept", global::Windows.System.VirtualKey.Accept);
                userType.AddEnumValue("ModeChange", global::Windows.System.VirtualKey.ModeChange);
                userType.AddEnumValue("Space", global::Windows.System.VirtualKey.Space);
                userType.AddEnumValue("PageUp", global::Windows.System.VirtualKey.PageUp);
                userType.AddEnumValue("PageDown", global::Windows.System.VirtualKey.PageDown);
                userType.AddEnumValue("End", global::Windows.System.VirtualKey.End);
                userType.AddEnumValue("Home", global::Windows.System.VirtualKey.Home);
                userType.AddEnumValue("Left", global::Windows.System.VirtualKey.Left);
                userType.AddEnumValue("Up", global::Windows.System.VirtualKey.Up);
                userType.AddEnumValue("Right", global::Windows.System.VirtualKey.Right);
                userType.AddEnumValue("Down", global::Windows.System.VirtualKey.Down);
                userType.AddEnumValue("Select", global::Windows.System.VirtualKey.Select);
                userType.AddEnumValue("Print", global::Windows.System.VirtualKey.Print);
                userType.AddEnumValue("Execute", global::Windows.System.VirtualKey.Execute);
                userType.AddEnumValue("Snapshot", global::Windows.System.VirtualKey.Snapshot);
                userType.AddEnumValue("Insert", global::Windows.System.VirtualKey.Insert);
                userType.AddEnumValue("Delete", global::Windows.System.VirtualKey.Delete);
                userType.AddEnumValue("Help", global::Windows.System.VirtualKey.Help);
                userType.AddEnumValue("Number0", global::Windows.System.VirtualKey.Number0);
                userType.AddEnumValue("Number1", global::Windows.System.VirtualKey.Number1);
                userType.AddEnumValue("Number2", global::Windows.System.VirtualKey.Number2);
                userType.AddEnumValue("Number3", global::Windows.System.VirtualKey.Number3);
                userType.AddEnumValue("Number4", global::Windows.System.VirtualKey.Number4);
                userType.AddEnumValue("Number5", global::Windows.System.VirtualKey.Number5);
                userType.AddEnumValue("Number6", global::Windows.System.VirtualKey.Number6);
                userType.AddEnumValue("Number7", global::Windows.System.VirtualKey.Number7);
                userType.AddEnumValue("Number8", global::Windows.System.VirtualKey.Number8);
                userType.AddEnumValue("Number9", global::Windows.System.VirtualKey.Number9);
                userType.AddEnumValue("A", global::Windows.System.VirtualKey.A);
                userType.AddEnumValue("B", global::Windows.System.VirtualKey.B);
                userType.AddEnumValue("C", global::Windows.System.VirtualKey.C);
                userType.AddEnumValue("D", global::Windows.System.VirtualKey.D);
                userType.AddEnumValue("E", global::Windows.System.VirtualKey.E);
                userType.AddEnumValue("F", global::Windows.System.VirtualKey.F);
                userType.AddEnumValue("G", global::Windows.System.VirtualKey.G);
                userType.AddEnumValue("H", global::Windows.System.VirtualKey.H);
                userType.AddEnumValue("I", global::Windows.System.VirtualKey.I);
                userType.AddEnumValue("J", global::Windows.System.VirtualKey.J);
                userType.AddEnumValue("K", global::Windows.System.VirtualKey.K);
                userType.AddEnumValue("L", global::Windows.System.VirtualKey.L);
                userType.AddEnumValue("M", global::Windows.System.VirtualKey.M);
                userType.AddEnumValue("N", global::Windows.System.VirtualKey.N);
                userType.AddEnumValue("O", global::Windows.System.VirtualKey.O);
                userType.AddEnumValue("P", global::Windows.System.VirtualKey.P);
                userType.AddEnumValue("Q", global::Windows.System.VirtualKey.Q);
                userType.AddEnumValue("R", global::Windows.System.VirtualKey.R);
                userType.AddEnumValue("S", global::Windows.System.VirtualKey.S);
                userType.AddEnumValue("T", global::Windows.System.VirtualKey.T);
                userType.AddEnumValue("U", global::Windows.System.VirtualKey.U);
                userType.AddEnumValue("V", global::Windows.System.VirtualKey.V);
                userType.AddEnumValue("W", global::Windows.System.VirtualKey.W);
                userType.AddEnumValue("X", global::Windows.System.VirtualKey.X);
                userType.AddEnumValue("Y", global::Windows.System.VirtualKey.Y);
                userType.AddEnumValue("Z", global::Windows.System.VirtualKey.Z);
                userType.AddEnumValue("LeftWindows", global::Windows.System.VirtualKey.LeftWindows);
                userType.AddEnumValue("RightWindows", global::Windows.System.VirtualKey.RightWindows);
                userType.AddEnumValue("Application", global::Windows.System.VirtualKey.Application);
                userType.AddEnumValue("Sleep", global::Windows.System.VirtualKey.Sleep);
                userType.AddEnumValue("NumberPad0", global::Windows.System.VirtualKey.NumberPad0);
                userType.AddEnumValue("NumberPad1", global::Windows.System.VirtualKey.NumberPad1);
                userType.AddEnumValue("NumberPad2", global::Windows.System.VirtualKey.NumberPad2);
                userType.AddEnumValue("NumberPad3", global::Windows.System.VirtualKey.NumberPad3);
                userType.AddEnumValue("NumberPad4", global::Windows.System.VirtualKey.NumberPad4);
                userType.AddEnumValue("NumberPad5", global::Windows.System.VirtualKey.NumberPad5);
                userType.AddEnumValue("NumberPad6", global::Windows.System.VirtualKey.NumberPad6);
                userType.AddEnumValue("NumberPad7", global::Windows.System.VirtualKey.NumberPad7);
                userType.AddEnumValue("NumberPad8", global::Windows.System.VirtualKey.NumberPad8);
                userType.AddEnumValue("NumberPad9", global::Windows.System.VirtualKey.NumberPad9);
                userType.AddEnumValue("Multiply", global::Windows.System.VirtualKey.Multiply);
                userType.AddEnumValue("Add", global::Windows.System.VirtualKey.Add);
                userType.AddEnumValue("Separator", global::Windows.System.VirtualKey.Separator);
                userType.AddEnumValue("Subtract", global::Windows.System.VirtualKey.Subtract);
                userType.AddEnumValue("Decimal", global::Windows.System.VirtualKey.Decimal);
                userType.AddEnumValue("Divide", global::Windows.System.VirtualKey.Divide);
                userType.AddEnumValue("F1", global::Windows.System.VirtualKey.F1);
                userType.AddEnumValue("F2", global::Windows.System.VirtualKey.F2);
                userType.AddEnumValue("F3", global::Windows.System.VirtualKey.F3);
                userType.AddEnumValue("F4", global::Windows.System.VirtualKey.F4);
                userType.AddEnumValue("F5", global::Windows.System.VirtualKey.F5);
                userType.AddEnumValue("F6", global::Windows.System.VirtualKey.F6);
                userType.AddEnumValue("F7", global::Windows.System.VirtualKey.F7);
                userType.AddEnumValue("F8", global::Windows.System.VirtualKey.F8);
                userType.AddEnumValue("F9", global::Windows.System.VirtualKey.F9);
                userType.AddEnumValue("F10", global::Windows.System.VirtualKey.F10);
                userType.AddEnumValue("F11", global::Windows.System.VirtualKey.F11);
                userType.AddEnumValue("F12", global::Windows.System.VirtualKey.F12);
                userType.AddEnumValue("F13", global::Windows.System.VirtualKey.F13);
                userType.AddEnumValue("F14", global::Windows.System.VirtualKey.F14);
                userType.AddEnumValue("F15", global::Windows.System.VirtualKey.F15);
                userType.AddEnumValue("F16", global::Windows.System.VirtualKey.F16);
                userType.AddEnumValue("F17", global::Windows.System.VirtualKey.F17);
                userType.AddEnumValue("F18", global::Windows.System.VirtualKey.F18);
                userType.AddEnumValue("F19", global::Windows.System.VirtualKey.F19);
                userType.AddEnumValue("F20", global::Windows.System.VirtualKey.F20);
                userType.AddEnumValue("F21", global::Windows.System.VirtualKey.F21);
                userType.AddEnumValue("F22", global::Windows.System.VirtualKey.F22);
                userType.AddEnumValue("F23", global::Windows.System.VirtualKey.F23);
                userType.AddEnumValue("F24", global::Windows.System.VirtualKey.F24);
                userType.AddEnumValue("NavigationView", global::Windows.System.VirtualKey.NavigationView);
                userType.AddEnumValue("NavigationMenu", global::Windows.System.VirtualKey.NavigationMenu);
                userType.AddEnumValue("NavigationUp", global::Windows.System.VirtualKey.NavigationUp);
                userType.AddEnumValue("NavigationDown", global::Windows.System.VirtualKey.NavigationDown);
                userType.AddEnumValue("NavigationLeft", global::Windows.System.VirtualKey.NavigationLeft);
                userType.AddEnumValue("NavigationRight", global::Windows.System.VirtualKey.NavigationRight);
                userType.AddEnumValue("NavigationAccept", global::Windows.System.VirtualKey.NavigationAccept);
                userType.AddEnumValue("NavigationCancel", global::Windows.System.VirtualKey.NavigationCancel);
                userType.AddEnumValue("NumberKeyLock", global::Windows.System.VirtualKey.NumberKeyLock);
                userType.AddEnumValue("Scroll", global::Windows.System.VirtualKey.Scroll);
                userType.AddEnumValue("LeftShift", global::Windows.System.VirtualKey.LeftShift);
                userType.AddEnumValue("RightShift", global::Windows.System.VirtualKey.RightShift);
                userType.AddEnumValue("LeftControl", global::Windows.System.VirtualKey.LeftControl);
                userType.AddEnumValue("RightControl", global::Windows.System.VirtualKey.RightControl);
                userType.AddEnumValue("LeftMenu", global::Windows.System.VirtualKey.LeftMenu);
                userType.AddEnumValue("RightMenu", global::Windows.System.VirtualKey.RightMenu);
                userType.AddEnumValue("GoBack", global::Windows.System.VirtualKey.GoBack);
                userType.AddEnumValue("GoForward", global::Windows.System.VirtualKey.GoForward);
                userType.AddEnumValue("Refresh", global::Windows.System.VirtualKey.Refresh);
                userType.AddEnumValue("Stop", global::Windows.System.VirtualKey.Stop);
                userType.AddEnumValue("Search", global::Windows.System.VirtualKey.Search);
                userType.AddEnumValue("Favorites", global::Windows.System.VirtualKey.Favorites);
                userType.AddEnumValue("GoHome", global::Windows.System.VirtualKey.GoHome);
                userType.AddEnumValue("GamepadA", global::Windows.System.VirtualKey.GamepadA);
                userType.AddEnumValue("GamepadB", global::Windows.System.VirtualKey.GamepadB);
                userType.AddEnumValue("GamepadX", global::Windows.System.VirtualKey.GamepadX);
                userType.AddEnumValue("GamepadY", global::Windows.System.VirtualKey.GamepadY);
                userType.AddEnumValue("GamepadRightShoulder", global::Windows.System.VirtualKey.GamepadRightShoulder);
                userType.AddEnumValue("GamepadLeftShoulder", global::Windows.System.VirtualKey.GamepadLeftShoulder);
                userType.AddEnumValue("GamepadLeftTrigger", global::Windows.System.VirtualKey.GamepadLeftTrigger);
                userType.AddEnumValue("GamepadRightTrigger", global::Windows.System.VirtualKey.GamepadRightTrigger);
                userType.AddEnumValue("GamepadDPadUp", global::Windows.System.VirtualKey.GamepadDPadUp);
                userType.AddEnumValue("GamepadDPadDown", global::Windows.System.VirtualKey.GamepadDPadDown);
                userType.AddEnumValue("GamepadDPadLeft", global::Windows.System.VirtualKey.GamepadDPadLeft);
                userType.AddEnumValue("GamepadDPadRight", global::Windows.System.VirtualKey.GamepadDPadRight);
                userType.AddEnumValue("GamepadMenu", global::Windows.System.VirtualKey.GamepadMenu);
                userType.AddEnumValue("GamepadView", global::Windows.System.VirtualKey.GamepadView);
                userType.AddEnumValue("GamepadLeftThumbstickButton", global::Windows.System.VirtualKey.GamepadLeftThumbstickButton);
                userType.AddEnumValue("GamepadRightThumbstickButton", global::Windows.System.VirtualKey.GamepadRightThumbstickButton);
                userType.AddEnumValue("GamepadLeftThumbstickUp", global::Windows.System.VirtualKey.GamepadLeftThumbstickUp);
                userType.AddEnumValue("GamepadLeftThumbstickDown", global::Windows.System.VirtualKey.GamepadLeftThumbstickDown);
                userType.AddEnumValue("GamepadLeftThumbstickRight", global::Windows.System.VirtualKey.GamepadLeftThumbstickRight);
                userType.AddEnumValue("GamepadLeftThumbstickLeft", global::Windows.System.VirtualKey.GamepadLeftThumbstickLeft);
                userType.AddEnumValue("GamepadRightThumbstickUp", global::Windows.System.VirtualKey.GamepadRightThumbstickUp);
                userType.AddEnumValue("GamepadRightThumbstickDown", global::Windows.System.VirtualKey.GamepadRightThumbstickDown);
                userType.AddEnumValue("GamepadRightThumbstickRight", global::Windows.System.VirtualKey.GamepadRightThumbstickRight);
                userType.AddEnumValue("GamepadRightThumbstickLeft", global::Windows.System.VirtualKey.GamepadRightThumbstickLeft);
                xamlType = userType;
                break;

            case 43:   //  Template10.Behaviors.KeyBehavior.Kinds
                userType = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("KeyUp", global::Template10.Behaviors.KeyBehavior.Kinds.KeyUp);
                userType.AddEnumValue("KeyDown", global::Template10.Behaviors.KeyBehavior.Kinds.KeyDown);
                xamlType = userType;
                break;

            case 44:   //  Microsoft.Xaml.Interactions.Core.InvokeCommandAction
                userType = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_44_InvokeCommandAction;
                userType.AddMemberName("Command");
                userType.AddMemberName("CommandParameter");
                userType.AddMemberName("InputConverter");
                userType.AddMemberName("InputConverterParameter");
                userType.AddMemberName("InputConverterLanguage");
                xamlType = userType;
                break;

            case 45:   //  System.Windows.Input.ICommand
                userType = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 46:   //  Windows.UI.Xaml.Data.IValueConverter
                xamlType = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 47:   //  Template10.Behaviors.NavButtonBehavior
                userType = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_47_NavButtonBehavior;
                userType.AddMemberName("Direction");
                userType.AddMemberName("Frame");
                userType.AddMemberName("AssociatedObject");
                xamlType = userType;
                break;

            case 48:   //  Template10.Behaviors.NavButtonBehavior.Directions
                userType = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Back", global::Template10.Behaviors.NavButtonBehavior.Directions.Back);
                userType.AddEnumValue("Forward", global::Template10.Behaviors.NavButtonBehavior.Directions.Forward);
                xamlType = userType;
                break;

            case 49:   //  Template10.Samples.TilesSample.Views.MainPage
                userType = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_49_MainPage;
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    var otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::Template10.Template10__Library__XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    _otherProviders = otherProviders;
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_BootStrapper_SessionState(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.SessionState;
        }
        private void set_0_BootStrapper_SessionState(object instance, object Value)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            that.SessionState = (global::Template10.Common.StateItems)Value;
        }
        private object get_1_BootStrapper_NavigationService(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.NavigationService;
        }
        private object get_2_BootStrapper_SplashFactory(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.SplashFactory;
        }
        private object get_3_BootStrapper_CacheMaxDuration(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.CacheMaxDuration;
        }
        private void set_3_BootStrapper_CacheMaxDuration(object instance, object Value)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            that.CacheMaxDuration = (global::System.TimeSpan)Value;
        }
        private object get_4_BootStrapper_ShowShellBackButton(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.ShowShellBackButton;
        }
        private void set_4_BootStrapper_ShowShellBackButton(object instance, object Value)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            that.ShowShellBackButton = (global::System.Boolean)Value;
        }
        private object get_5_BootStrapper_ForceShowShellBackButton(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.ForceShowShellBackButton;
        }
        private void set_5_BootStrapper_ForceShowShellBackButton(object instance, object Value)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            that.ForceShowShellBackButton = (global::System.Boolean)Value;
        }
        private object get_6_BootStrapper_OriginalActivatedArgs(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.OriginalActivatedArgs;
        }
        private object get_7_BootStrapper_CurrentState(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.CurrentState;
        }
        private void set_7_BootStrapper_CurrentState(object instance, object Value)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            that.CurrentState = (global::Template10.Common.BootStrapper.States)Value;
        }
        private object get_8_BootStrapper_EnableAutoRestoreAfterTerminated(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.EnableAutoRestoreAfterTerminated;
        }
        private void set_8_BootStrapper_EnableAutoRestoreAfterTerminated(object instance, object Value)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            that.EnableAutoRestoreAfterTerminated = (global::System.Boolean)Value;
        }
        private object get_9_BootStrapper_AutoRestoreAfterTerminated(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.AutoRestoreAfterTerminated;
        }
        private void set_9_BootStrapper_AutoRestoreAfterTerminated(object instance, object Value)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            that.AutoRestoreAfterTerminated = (global::System.Boolean)Value;
        }
        private object get_10_BootStrapper_AutoExtendExecutionSession(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.AutoExtendExecutionSession;
        }
        private void set_10_BootStrapper_AutoExtendExecutionSession(object instance, object Value)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            that.AutoExtendExecutionSession = (global::System.Boolean)Value;
        }
        private object get_11_BootStrapper_AutoSuspendAllFrames(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.AutoSuspendAllFrames;
        }
        private void set_11_BootStrapper_AutoSuspendAllFrames(object instance, object Value)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            that.AutoSuspendAllFrames = (global::System.Boolean)Value;
        }
        private object get_12_BootStrapper_ModalDialog(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.ModalDialog;
        }
        private object get_13_BootStrapper_ModalContent(object instance)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            return that.ModalContent;
        }
        private void set_13_BootStrapper_ModalContent(object instance, object Value)
        {
            var that = (global::Template10.Common.BootStrapper)instance;
            that.ModalContent = (global::Windows.UI.Xaml.UIElement)Value;
        }
        private object get_14_DetailPageViewModel_Value(object instance)
        {
            var that = (global::Template10.Samples.TilesSample.ViewModels.DetailPageViewModel)instance;
            return that.Value;
        }
        private void set_14_DetailPageViewModel_Value(object instance, object Value)
        {
            var that = (global::Template10.Samples.TilesSample.ViewModels.DetailPageViewModel)instance;
            that.Value = (global::System.String)Value;
        }
        private object get_15_DetailPageViewModel_PinVisibility(object instance)
        {
            var that = (global::Template10.Samples.TilesSample.ViewModels.DetailPageViewModel)instance;
            return that.PinVisibility;
        }
        private void set_15_DetailPageViewModel_PinVisibility(object instance, object Value)
        {
            var that = (global::Template10.Samples.TilesSample.ViewModels.DetailPageViewModel)instance;
            that.PinVisibility = (global::Windows.UI.Xaml.Visibility)Value;
        }
        private object get_16_DetailPageViewModel_UnPinVisibility(object instance)
        {
            var that = (global::Template10.Samples.TilesSample.ViewModels.DetailPageViewModel)instance;
            return that.UnPinVisibility;
        }
        private void set_16_DetailPageViewModel_UnPinVisibility(object instance, object Value)
        {
            var that = (global::Template10.Samples.TilesSample.ViewModels.DetailPageViewModel)instance;
            that.UnPinVisibility = (global::Windows.UI.Xaml.Visibility)Value;
        }
        private object get_17_ViewModelBase_NavigationService(object instance)
        {
            var that = (global::Template10.Mvvm.ViewModelBase)instance;
            return that.NavigationService;
        }
        private void set_17_ViewModelBase_NavigationService(object instance, object Value)
        {
            var that = (global::Template10.Mvvm.ViewModelBase)instance;
            that.NavigationService = (global::Template10.Services.NavigationService.INavigationService)Value;
        }
        private object get_18_ViewModelBase_Dispatcher(object instance)
        {
            var that = (global::Template10.Mvvm.ViewModelBase)instance;
            return that.Dispatcher;
        }
        private void set_18_ViewModelBase_Dispatcher(object instance, object Value)
        {
            var that = (global::Template10.Mvvm.ViewModelBase)instance;
            that.Dispatcher = (global::Template10.Common.IDispatcherWrapper)Value;
        }
        private object get_19_ViewModelBase_SessionState(object instance)
        {
            var that = (global::Template10.Mvvm.ViewModelBase)instance;
            return that.SessionState;
        }
        private void set_19_ViewModelBase_SessionState(object instance, object Value)
        {
            var that = (global::Template10.Mvvm.ViewModelBase)instance;
            that.SessionState = (global::Template10.Common.IStateItems)Value;
        }
        private object get_20_PageHeader_Frame(object instance)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            return that.Frame;
        }
        private void set_20_PageHeader_Frame(object instance, object Value)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            that.Frame = (global::Windows.UI.Xaml.Controls.Frame)Value;
        }
        private object get_21_PageHeader_EllipsisVisibility(object instance)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            return that.EllipsisVisibility;
        }
        private void set_21_PageHeader_EllipsisVisibility(object instance, object Value)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            that.EllipsisVisibility = (global::Template10.Behaviors.EllipsisBehavior.Visibilities)Value;
        }
        private object get_22_PageHeader_PrimaryCommandsVisibility(object instance)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            return that.PrimaryCommandsVisibility;
        }
        private void set_22_PageHeader_PrimaryCommandsVisibility(object instance, object Value)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            that.PrimaryCommandsVisibility = (global::Windows.UI.Xaml.Visibility)Value;
        }
        private object get_23_PageHeader_BackButtonVisibility(object instance)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            return that.BackButtonVisibility;
        }
        private void set_23_PageHeader_BackButtonVisibility(object instance, object Value)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            that.BackButtonVisibility = (global::Windows.UI.Xaml.Visibility)Value;
        }
        private object get_24_PageHeader_BackButtonContent(object instance)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            return that.BackButtonContent;
        }
        private void set_24_PageHeader_BackButtonContent(object instance, object Value)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            that.BackButtonContent = (global::Windows.UI.Xaml.Controls.Symbol)Value;
        }
        private object get_25_PageHeader_EnableHamburgerMenuAutoLayout(object instance)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            return that.EnableHamburgerMenuAutoLayout;
        }
        private void set_25_PageHeader_EnableHamburgerMenuAutoLayout(object instance, object Value)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            that.EnableHamburgerMenuAutoLayout = (global::System.Boolean)Value;
        }
        private object get_26_PageHeader_VisualStateNarrowMinWidth(object instance)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            return that.VisualStateNarrowMinWidth;
        }
        private void set_26_PageHeader_VisualStateNarrowMinWidth(object instance, object Value)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            that.VisualStateNarrowMinWidth = (global::System.Double)Value;
        }
        private object get_27_PageHeader_VisualStateNormalMinWidth(object instance)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            return that.VisualStateNormalMinWidth;
        }
        private void set_27_PageHeader_VisualStateNormalMinWidth(object instance, object Value)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            that.VisualStateNormalMinWidth = (global::System.Double)Value;
        }
        private object get_28_PageHeader_Text(object instance)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            return that.Text;
        }
        private void set_28_PageHeader_Text(object instance, object Value)
        {
            var that = (global::Template10.Controls.PageHeader)instance;
            that.Text = (global::System.String)Value;
        }
        private object get_29_DetailPage_ViewModel(object instance)
        {
            var that = (global::Template10.Samples.TilesSample.Views.DetailPage)instance;
            return that.ViewModel;
        }
        private object get_30_MainPageViewModel_Value(object instance)
        {
            var that = (global::Template10.Samples.TilesSample.ViewModels.MainPageViewModel)instance;
            return that.Value;
        }
        private void set_30_MainPageViewModel_Value(object instance, object Value)
        {
            var that = (global::Template10.Samples.TilesSample.ViewModels.MainPageViewModel)instance;
            that.Value = (global::System.String)Value;
        }
        private object get_31_MainPageViewModel_GotoDetailsPageCommand(object instance)
        {
            var that = (global::Template10.Samples.TilesSample.ViewModels.MainPageViewModel)instance;
            return that.GotoDetailsPageCommand;
        }
        private object get_32_Interaction_Behaviors(object instance)
        {
            return global::Microsoft.Xaml.Interactivity.Interaction.GetBehaviors((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_32_Interaction_Behaviors(object instance, object Value)
        {
            global::Microsoft.Xaml.Interactivity.Interaction.SetBehaviors((global::Windows.UI.Xaml.DependencyObject)instance, (global::Microsoft.Xaml.Interactivity.BehaviorCollection)Value);
        }
        private object get_33_KeyBehavior_Actions(object instance)
        {
            var that = (global::Template10.Behaviors.KeyBehavior)instance;
            return that.Actions;
        }
        private object get_34_KeyBehavior_Key(object instance)
        {
            var that = (global::Template10.Behaviors.KeyBehavior)instance;
            return that.Key;
        }
        private void set_34_KeyBehavior_Key(object instance, object Value)
        {
            var that = (global::Template10.Behaviors.KeyBehavior)instance;
            that.Key = (global::Windows.System.VirtualKey)Value;
        }
        private object get_35_KeyBehavior_AssociatedObject(object instance)
        {
            var that = (global::Template10.Behaviors.KeyBehavior)instance;
            return that.AssociatedObject;
        }
        private object get_36_KeyBehavior_AndControl(object instance)
        {
            var that = (global::Template10.Behaviors.KeyBehavior)instance;
            return that.AndControl;
        }
        private void set_36_KeyBehavior_AndControl(object instance, object Value)
        {
            var that = (global::Template10.Behaviors.KeyBehavior)instance;
            that.AndControl = (global::System.Boolean)Value;
        }
        private object get_37_KeyBehavior_AndAlt(object instance)
        {
            var that = (global::Template10.Behaviors.KeyBehavior)instance;
            return that.AndAlt;
        }
        private void set_37_KeyBehavior_AndAlt(object instance, object Value)
        {
            var that = (global::Template10.Behaviors.KeyBehavior)instance;
            that.AndAlt = (global::System.Boolean)Value;
        }
        private object get_38_KeyBehavior_AndShift(object instance)
        {
            var that = (global::Template10.Behaviors.KeyBehavior)instance;
            return that.AndShift;
        }
        private void set_38_KeyBehavior_AndShift(object instance, object Value)
        {
            var that = (global::Template10.Behaviors.KeyBehavior)instance;
            that.AndShift = (global::System.Boolean)Value;
        }
        private object get_39_KeyBehavior_Event(object instance)
        {
            var that = (global::Template10.Behaviors.KeyBehavior)instance;
            return that.Event;
        }
        private void set_39_KeyBehavior_Event(object instance, object Value)
        {
            var that = (global::Template10.Behaviors.KeyBehavior)instance;
            that.Event = (global::Template10.Behaviors.KeyBehavior.Kinds)Value;
        }
        private object get_40_InvokeCommandAction_Command(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            return that.Command;
        }
        private void set_40_InvokeCommandAction_Command(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            that.Command = (global::System.Windows.Input.ICommand)Value;
        }
        private object get_41_InvokeCommandAction_CommandParameter(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            return that.CommandParameter;
        }
        private void set_41_InvokeCommandAction_CommandParameter(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            that.CommandParameter = (global::System.Object)Value;
        }
        private object get_42_InvokeCommandAction_InputConverter(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            return that.InputConverter;
        }
        private void set_42_InvokeCommandAction_InputConverter(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            that.InputConverter = (global::Windows.UI.Xaml.Data.IValueConverter)Value;
        }
        private object get_43_InvokeCommandAction_InputConverterParameter(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            return that.InputConverterParameter;
        }
        private void set_43_InvokeCommandAction_InputConverterParameter(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            that.InputConverterParameter = (global::System.Object)Value;
        }
        private object get_44_InvokeCommandAction_InputConverterLanguage(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            return that.InputConverterLanguage;
        }
        private void set_44_InvokeCommandAction_InputConverterLanguage(object instance, object Value)
        {
            var that = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)instance;
            that.InputConverterLanguage = (global::System.String)Value;
        }
        private object get_45_NavButtonBehavior_Direction(object instance)
        {
            var that = (global::Template10.Behaviors.NavButtonBehavior)instance;
            return that.Direction;
        }
        private void set_45_NavButtonBehavior_Direction(object instance, object Value)
        {
            var that = (global::Template10.Behaviors.NavButtonBehavior)instance;
            that.Direction = (global::Template10.Behaviors.NavButtonBehavior.Directions)Value;
        }
        private object get_46_NavButtonBehavior_Frame(object instance)
        {
            var that = (global::Template10.Behaviors.NavButtonBehavior)instance;
            return that.Frame;
        }
        private void set_46_NavButtonBehavior_Frame(object instance, object Value)
        {
            var that = (global::Template10.Behaviors.NavButtonBehavior)instance;
            that.Frame = (global::Windows.UI.Xaml.Controls.Frame)Value;
        }
        private object get_47_NavButtonBehavior_AssociatedObject(object instance)
        {
            var that = (global::Template10.Behaviors.NavButtonBehavior)instance;
            return that.AssociatedObject;
        }
        private void set_47_NavButtonBehavior_AssociatedObject(object instance, object Value)
        {
            var that = (global::Template10.Behaviors.NavButtonBehavior)instance;
            that.AssociatedObject = (global::Windows.UI.Xaml.DependencyObject)Value;
        }
        private object get_48_MainPage_ViewModel(object instance)
        {
            var that = (global::Template10.Samples.TilesSample.Views.MainPage)instance;
            return that.ViewModel;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlMember xamlMember = null;
            global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Template10.Common.BootStrapper.SessionState":
                userType = (global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlMember(this, "SessionState", "Template10.Common.StateItems");
                xamlMember.Getter = get_0_BootStrapper_SessionState;
                xamlMember.Setter = set_0_BootStrapper_SessionState;
                break;
            case "Template10.Common.BootStrapper.NavigationService":
                userType = (global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlMember(this, "NavigationService", "Template10.Services.NavigationService.INavigationService");
                xamlMember.Getter = get_1_BootStrapper_NavigationService;
                xamlMember.SetIsReadOnly();
                break;
            case "Template10.Common.BootStrapper.SplashFactory":
                userType = (global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlMember(this, "SplashFactory", "System.Func`2<Windows.ApplicationModel.Activation.SplashScreen, Windows.UI.Xaml.Controls.UserControl>");
                xamlMember.Getter = get_2_BootStrapper_SplashFactory;
                xamlMember.SetIsReadOnly();
                break;
            case "Template10.Common.BootStrapper.CacheMaxDuration":
                userType = (global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlMember(this, "CacheMaxDuration", "TimeSpan");
                xamlMember.Getter = get_3_BootStrapper_CacheMaxDuration;
                xamlMember.Setter = set_3_BootStrapper_CacheMaxDuration;
                break;
            case "Template10.Common.BootStrapper.ShowShellBackButton":
                userType = (global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlMember(this, "ShowShellBackButton", "Boolean");
                xamlMember.Getter = get_4_BootStrapper_ShowShellBackButton;
                xamlMember.Setter = set_4_BootStrapper_ShowShellBackButton;
                break;
            case "Template10.Common.BootStrapper.ForceShowShellBackButton":
                userType = (global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlMember(this, "ForceShowShellBackButton", "Boolean");
                xamlMember.Getter = get_5_BootStrapper_ForceShowShellBackButton;
                xamlMember.Setter = set_5_BootStrapper_ForceShowShellBackButton;
                break;
            case "Template10.Common.BootStrapper.OriginalActivatedArgs":
                userType = (global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlMember(this, "OriginalActivatedArgs", "Windows.ApplicationModel.Activation.IActivatedEventArgs");
                xamlMember.Getter = get_6_BootStrapper_OriginalActivatedArgs;
                xamlMember.SetIsReadOnly();
                break;
            case "Template10.Common.BootStrapper.CurrentState":
                userType = (global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlMember(this, "CurrentState", "Template10.Common.BootStrapper.States");
                xamlMember.Getter = get_7_BootStrapper_CurrentState;
                xamlMember.Setter = set_7_BootStrapper_CurrentState;
                break;
            case "Template10.Common.BootStrapper.EnableAutoRestoreAfterTerminated":
                userType = (global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlMember(this, "EnableAutoRestoreAfterTerminated", "Boolean");
                xamlMember.Getter = get_8_BootStrapper_EnableAutoRestoreAfterTerminated;
                xamlMember.Setter = set_8_BootStrapper_EnableAutoRestoreAfterTerminated;
                break;
            case "Template10.Common.BootStrapper.AutoRestoreAfterTerminated":
                userType = (global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlMember(this, "AutoRestoreAfterTerminated", "Boolean");
                xamlMember.Getter = get_9_BootStrapper_AutoRestoreAfterTerminated;
                xamlMember.Setter = set_9_BootStrapper_AutoRestoreAfterTerminated;
                break;
            case "Template10.Common.BootStrapper.AutoExtendExecutionSession":
                userType = (global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlMember(this, "AutoExtendExecutionSession", "Boolean");
                xamlMember.Getter = get_10_BootStrapper_AutoExtendExecutionSession;
                xamlMember.Setter = set_10_BootStrapper_AutoExtendExecutionSession;
                break;
            case "Template10.Common.BootStrapper.AutoSuspendAllFrames":
                userType = (global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlMember(this, "AutoSuspendAllFrames", "Boolean");
                xamlMember.Getter = get_11_BootStrapper_AutoSuspendAllFrames;
                xamlMember.Setter = set_11_BootStrapper_AutoSuspendAllFrames;
                break;
            case "Template10.Common.BootStrapper.ModalDialog":
                userType = (global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlMember(this, "ModalDialog", "Template10.Controls.ModalDialog");
                xamlMember.Getter = get_12_BootStrapper_ModalDialog;
                xamlMember.SetIsReadOnly();
                break;
            case "Template10.Common.BootStrapper.ModalContent":
                userType = (global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Common.BootStrapper");
                xamlMember = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlMember(this, "ModalContent", "Windows.UI.Xaml.UIElement");
                xamlMember.Getter = get_13_BootStrapper_ModalContent;
                xamlMember.Setter = set_13_BootStrapper_ModalContent;
                break;
            case "Template10.Samples.TilesSample.ViewModels.DetailPageViewModel.Value":
                userType = (global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Samples.TilesSample.ViewModels.DetailPageViewModel");
                xamlMember = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlMember(this, "Value", "String");
                xamlMember.Getter = get_14_DetailPageViewModel_Value;
                xamlMember.Setter = set_14_DetailPageViewModel_Value;
                break;
            case "Template10.Samples.TilesSample.ViewModels.DetailPageViewModel.PinVisibility":
                userType = (global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Samples.TilesSample.ViewModels.DetailPageViewModel");
                xamlMember = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlMember(this, "PinVisibility", "Windows.UI.Xaml.Visibility");
                xamlMember.Getter = get_15_DetailPageViewModel_PinVisibility;
                xamlMember.Setter = set_15_DetailPageViewModel_PinVisibility;
                break;
            case "Template10.Samples.TilesSample.ViewModels.DetailPageViewModel.UnPinVisibility":
                userType = (global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Samples.TilesSample.ViewModels.DetailPageViewModel");
                xamlMember = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlMember(this, "UnPinVisibility", "Windows.UI.Xaml.Visibility");
                xamlMember.Getter = get_16_DetailPageViewModel_UnPinVisibility;
                xamlMember.Setter = set_16_DetailPageViewModel_UnPinVisibility;
                break;
            case "Template10.Mvvm.ViewModelBase.NavigationService":
                userType = (global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Mvvm.ViewModelBase");
                xamlMember = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlMember(this, "NavigationService", "Template10.Services.NavigationService.INavigationService");
                xamlMember.Getter = get_17_ViewModelBase_NavigationService;
                xamlMember.Setter = set_17_ViewModelBase_NavigationService;
                break;
            case "Template10.Mvvm.ViewModelBase.Dispatcher":
                userType = (global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Mvvm.ViewModelBase");
                xamlMember = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlMember(this, "Dispatcher", "Template10.Common.IDispatcherWrapper");
                xamlMember.Getter = get_18_ViewModelBase_Dispatcher;
                xamlMember.Setter = set_18_ViewModelBase_Dispatcher;
                break;
            case "Template10.Mvvm.ViewModelBase.SessionState":
                userType = (global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Mvvm.ViewModelBase");
                xamlMember = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlMember(this, "SessionState", "Template10.Common.IStateItems");
                xamlMember.Getter = get_19_ViewModelBase_SessionState;
                xamlMember.Setter = set_19_ViewModelBase_SessionState;
                break;
            case "Template10.Controls.PageHeader.Frame":
                userType = (global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.PageHeader");
                xamlMember = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlMember(this, "Frame", "Windows.UI.Xaml.Controls.Frame");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_20_PageHeader_Frame;
                xamlMember.Setter = set_20_PageHeader_Frame;
                break;
            case "Template10.Controls.PageHeader.EllipsisVisibility":
                userType = (global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.PageHeader");
                xamlMember = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlMember(this, "EllipsisVisibility", "Template10.Behaviors.EllipsisBehavior.Visibilities");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_21_PageHeader_EllipsisVisibility;
                xamlMember.Setter = set_21_PageHeader_EllipsisVisibility;
                break;
            case "Template10.Controls.PageHeader.PrimaryCommandsVisibility":
                userType = (global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.PageHeader");
                xamlMember = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlMember(this, "PrimaryCommandsVisibility", "Windows.UI.Xaml.Visibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_22_PageHeader_PrimaryCommandsVisibility;
                xamlMember.Setter = set_22_PageHeader_PrimaryCommandsVisibility;
                break;
            case "Template10.Controls.PageHeader.BackButtonVisibility":
                userType = (global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.PageHeader");
                xamlMember = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlMember(this, "BackButtonVisibility", "Windows.UI.Xaml.Visibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_23_PageHeader_BackButtonVisibility;
                xamlMember.Setter = set_23_PageHeader_BackButtonVisibility;
                break;
            case "Template10.Controls.PageHeader.BackButtonContent":
                userType = (global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.PageHeader");
                xamlMember = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlMember(this, "BackButtonContent", "Windows.UI.Xaml.Controls.Symbol");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_24_PageHeader_BackButtonContent;
                xamlMember.Setter = set_24_PageHeader_BackButtonContent;
                break;
            case "Template10.Controls.PageHeader.EnableHamburgerMenuAutoLayout":
                userType = (global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.PageHeader");
                xamlMember = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlMember(this, "EnableHamburgerMenuAutoLayout", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_25_PageHeader_EnableHamburgerMenuAutoLayout;
                xamlMember.Setter = set_25_PageHeader_EnableHamburgerMenuAutoLayout;
                break;
            case "Template10.Controls.PageHeader.VisualStateNarrowMinWidth":
                userType = (global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.PageHeader");
                xamlMember = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlMember(this, "VisualStateNarrowMinWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_26_PageHeader_VisualStateNarrowMinWidth;
                xamlMember.Setter = set_26_PageHeader_VisualStateNarrowMinWidth;
                break;
            case "Template10.Controls.PageHeader.VisualStateNormalMinWidth":
                userType = (global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.PageHeader");
                xamlMember = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlMember(this, "VisualStateNormalMinWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_27_PageHeader_VisualStateNormalMinWidth;
                xamlMember.Setter = set_27_PageHeader_VisualStateNormalMinWidth;
                break;
            case "Template10.Controls.PageHeader.Text":
                userType = (global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Controls.PageHeader");
                xamlMember = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlMember(this, "Text", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_28_PageHeader_Text;
                xamlMember.Setter = set_28_PageHeader_Text;
                break;
            case "Template10.Samples.TilesSample.Views.DetailPage.ViewModel":
                userType = (global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Samples.TilesSample.Views.DetailPage");
                xamlMember = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlMember(this, "ViewModel", "Template10.Samples.TilesSample.ViewModels.DetailPageViewModel");
                xamlMember.Getter = get_29_DetailPage_ViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Template10.Samples.TilesSample.ViewModels.MainPageViewModel.Value":
                userType = (global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Samples.TilesSample.ViewModels.MainPageViewModel");
                xamlMember = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlMember(this, "Value", "String");
                xamlMember.Getter = get_30_MainPageViewModel_Value;
                xamlMember.Setter = set_30_MainPageViewModel_Value;
                break;
            case "Template10.Samples.TilesSample.ViewModels.MainPageViewModel.GotoDetailsPageCommand":
                userType = (global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Samples.TilesSample.ViewModels.MainPageViewModel");
                xamlMember = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlMember(this, "GotoDetailsPageCommand", "Template10.Mvvm.DelegateCommand");
                xamlMember.Getter = get_31_MainPageViewModel_GotoDetailsPageCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.Xaml.Interactivity.Interaction.Behaviors":
                userType = (global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactivity.Interaction");
                xamlMember = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlMember(this, "Behaviors", "Microsoft.Xaml.Interactivity.BehaviorCollection");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_32_Interaction_Behaviors;
                xamlMember.Setter = set_32_Interaction_Behaviors;
                break;
            case "Template10.Behaviors.KeyBehavior.Actions":
                userType = (global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Behaviors.KeyBehavior");
                xamlMember = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlMember(this, "Actions", "Microsoft.Xaml.Interactivity.ActionCollection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_33_KeyBehavior_Actions;
                xamlMember.SetIsReadOnly();
                break;
            case "Template10.Behaviors.KeyBehavior.Key":
                userType = (global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Behaviors.KeyBehavior");
                xamlMember = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlMember(this, "Key", "Windows.System.VirtualKey");
                xamlMember.Getter = get_34_KeyBehavior_Key;
                xamlMember.Setter = set_34_KeyBehavior_Key;
                break;
            case "Template10.Behaviors.KeyBehavior.AssociatedObject":
                userType = (global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Behaviors.KeyBehavior");
                xamlMember = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlMember(this, "AssociatedObject", "Windows.UI.Xaml.DependencyObject");
                xamlMember.Getter = get_35_KeyBehavior_AssociatedObject;
                xamlMember.SetIsReadOnly();
                break;
            case "Template10.Behaviors.KeyBehavior.AndControl":
                userType = (global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Behaviors.KeyBehavior");
                xamlMember = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlMember(this, "AndControl", "Boolean");
                xamlMember.Getter = get_36_KeyBehavior_AndControl;
                xamlMember.Setter = set_36_KeyBehavior_AndControl;
                break;
            case "Template10.Behaviors.KeyBehavior.AndAlt":
                userType = (global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Behaviors.KeyBehavior");
                xamlMember = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlMember(this, "AndAlt", "Boolean");
                xamlMember.Getter = get_37_KeyBehavior_AndAlt;
                xamlMember.Setter = set_37_KeyBehavior_AndAlt;
                break;
            case "Template10.Behaviors.KeyBehavior.AndShift":
                userType = (global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Behaviors.KeyBehavior");
                xamlMember = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlMember(this, "AndShift", "Boolean");
                xamlMember.Getter = get_38_KeyBehavior_AndShift;
                xamlMember.Setter = set_38_KeyBehavior_AndShift;
                break;
            case "Template10.Behaviors.KeyBehavior.Event":
                userType = (global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Behaviors.KeyBehavior");
                xamlMember = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlMember(this, "Event", "Template10.Behaviors.KeyBehavior.Kinds");
                xamlMember.Getter = get_39_KeyBehavior_Event;
                xamlMember.Setter = set_39_KeyBehavior_Event;
                break;
            case "Microsoft.Xaml.Interactions.Core.InvokeCommandAction.Command":
                userType = (global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.InvokeCommandAction");
                xamlMember = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlMember(this, "Command", "System.Windows.Input.ICommand");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_40_InvokeCommandAction_Command;
                xamlMember.Setter = set_40_InvokeCommandAction_Command;
                break;
            case "Microsoft.Xaml.Interactions.Core.InvokeCommandAction.CommandParameter":
                userType = (global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.InvokeCommandAction");
                xamlMember = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlMember(this, "CommandParameter", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_41_InvokeCommandAction_CommandParameter;
                xamlMember.Setter = set_41_InvokeCommandAction_CommandParameter;
                break;
            case "Microsoft.Xaml.Interactions.Core.InvokeCommandAction.InputConverter":
                userType = (global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.InvokeCommandAction");
                xamlMember = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlMember(this, "InputConverter", "Windows.UI.Xaml.Data.IValueConverter");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_42_InvokeCommandAction_InputConverter;
                xamlMember.Setter = set_42_InvokeCommandAction_InputConverter;
                break;
            case "Microsoft.Xaml.Interactions.Core.InvokeCommandAction.InputConverterParameter":
                userType = (global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.InvokeCommandAction");
                xamlMember = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlMember(this, "InputConverterParameter", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_43_InvokeCommandAction_InputConverterParameter;
                xamlMember.Setter = set_43_InvokeCommandAction_InputConverterParameter;
                break;
            case "Microsoft.Xaml.Interactions.Core.InvokeCommandAction.InputConverterLanguage":
                userType = (global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactions.Core.InvokeCommandAction");
                xamlMember = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlMember(this, "InputConverterLanguage", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_44_InvokeCommandAction_InputConverterLanguage;
                xamlMember.Setter = set_44_InvokeCommandAction_InputConverterLanguage;
                break;
            case "Template10.Behaviors.NavButtonBehavior.Direction":
                userType = (global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Behaviors.NavButtonBehavior");
                xamlMember = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlMember(this, "Direction", "Template10.Behaviors.NavButtonBehavior.Directions");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_45_NavButtonBehavior_Direction;
                xamlMember.Setter = set_45_NavButtonBehavior_Direction;
                break;
            case "Template10.Behaviors.NavButtonBehavior.Frame":
                userType = (global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Behaviors.NavButtonBehavior");
                xamlMember = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlMember(this, "Frame", "Windows.UI.Xaml.Controls.Frame");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_46_NavButtonBehavior_Frame;
                xamlMember.Setter = set_46_NavButtonBehavior_Frame;
                break;
            case "Template10.Behaviors.NavButtonBehavior.AssociatedObject":
                userType = (global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Behaviors.NavButtonBehavior");
                xamlMember = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlMember(this, "AssociatedObject", "Windows.UI.Xaml.DependencyObject");
                xamlMember.Getter = get_47_NavButtonBehavior_AssociatedObject;
                xamlMember.Setter = set_47_NavButtonBehavior_AssociatedObject;
                break;
            case "Template10.Samples.TilesSample.Views.MainPage.ViewModel":
                userType = (global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlUserType)GetXamlTypeByName("Template10.Samples.TilesSample.Views.MainPage");
                xamlMember = new global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlMember(this, "ViewModel", "Template10.Samples.TilesSample.ViewModels.MainPageViewModel");
                xamlMember.Getter = get_48_MainPage_ViewModel;
                xamlMember.SetIsReadOnly();
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlSystemBaseType
    {
        global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::Sample.Tiles__and_Toast__XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

